  model.cpp
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(30,19): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35,36): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(40,25): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(47,20): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(48,38): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(56,39): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(58,53): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(82,52): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\Allocator.h(22,34): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\Allocator.h(186,57): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(183,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(186,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(189,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(192,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(196,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(199,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(202,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(205,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(211,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(214,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(217,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(220,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(224,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(227,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(230,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\BFloat16-inl.h(233,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(179,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(182,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(185,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(188,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(192,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(195,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(198,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(201,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(207,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(210,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(213,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(216,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(220,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(223,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(226,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Half-inl.h(229,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(185,6): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(180): message : 参见“c10::Scalar::v_t”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\typeid.h(65,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\typeid.h(511,45): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic(1971): message : 参见“std::atomic<unsigned short>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\typeid.h(478,1): warning C4267: “参数”: 从“size_t”转换到“const uint16_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\intrusive_ptr.h(76,40): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic(1977): message : 参见“std::atomic<unsigned __int64>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\intrusive_ptr.h(77,41): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic(1977): message : 参见“std::atomic<unsigned __int64>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\Storage.h(162,48): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(61,27): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(62,27): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(99,26): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(117,26): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\logging_is_not_google_glog.h(43,28): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\iosfwd(222): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(239,54): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(239): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(1998,62): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(163): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(2001,69): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(182): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(2044,41): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(2127,26): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(26,47): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\GeneratorImpl.h(82,20): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\core\GeneratorImpl.h(98,26): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\Generator.h(133,47): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\NamedTensor.h(67,30): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\NamedTensor.h(33): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1599,60): warning C4251: “at::Tensor::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::Tensor”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(104): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=at::Tensor
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::Tensor>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(734): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=at::Generator
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::Generator>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(800): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\CPUGeneratorImpl.h(34,22): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\MT19937RNGEngine.h(108): message : 参见“at::mt19937_engine”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\CPUGeneratorImpl.h(35,49): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\CPUGeneratorImpl.h(36,51): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(226,26): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xcall_once.h(21): message : 参见“std::once_flag”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(227,26): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xcall_once.h(21): message : 参见“std::once_flag”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(241,47): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(241): message : 参见“c10::optional<c10::QEngine>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(242,58): warning C4251: “at::Context::thc_state”: class“std::unique_ptr<THCState,void (__cdecl *)(THCState *)>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\detail\CUDAHooksInterface.h(76): message : 参见“std::unique_ptr<THCState,void (__cdecl *)(THCState *)>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Context.h(243,58): warning C4251: “at::Context::thh_state”: class“std::unique_ptr<THHState,void (__cdecl *)(THHState *)>”需要有 dll 接口由 class“at::Context”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\detail\HIPHooksInterface.h(33): message : 参见“std::unique_ptr<THHState,void (__cdecl *)(THHState *)>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1013,18): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(980): message : 参见“c10::IValue::Payload”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1131,18): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(986): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1144,51): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1141): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1145,30): warning C4251: “c10::StrongTypePtr::type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type_base.h(67,60): warning C4251: “std::enable_shared_from_this<c10::Type>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::Type>”的客户端使用
          with
          [
              _Ty=c10::Type
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory(2356): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::Type
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::string>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type_base.h(107): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(105,70): warning C4251: “c10::SingleElementType<c10::TypeKind::OptionalType,c10::OptionalType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::OptionalType,c10::OptionalType>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(189,38): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(179): message : 参见“c10::optional<size_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(190,34): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(191,32): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(179): message : 参见“c10::optional<size_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(253,41): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic(1977): message : 参见“std::atomic<unsigned __int64>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(351): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(351,50): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(325): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(661,45): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(662,36): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(425): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(664): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(664,32): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(449): message : 参见“c10::VaryingShape<c10::Stride>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(665,37): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(677,33): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(425): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(470): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<int64_t,std::allocator<int64_t>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(568): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(685,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(803,29): warning C4251: “c10::DictType::types”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type_base.h(204): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(811,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(853,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::QualifiedName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::QualifiedName>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(903): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(903,37): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(887): message : 参见“c10::optional<c10::QualifiedName>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(986,33): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type_base.h(204): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(988,42): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(954): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1070,22): warning C4251: “c10::EnumType::value_type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1071,48): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1000): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1072,51): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1000): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1812,25): warning C4251: “c10::ClassAttribute::attributeType_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1813,29): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2185,42): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2186,38): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\List.h(25): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2188,51): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1000): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2191,42): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2095): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2194,39): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type_base.h(204): message : 参见“std::vector<c10::TypePtr,std::allocator<c10::TypePtr>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2197,46): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1864): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2198,52): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1864): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2201,52): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1864): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2202,56): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(1864): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2205,36): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2002): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2210,27): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2213,56): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2271,56): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(2271): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\InlineStreamGuard.h(196): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::VirtualGuardImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\InlineStreamGuard.h(231): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(226,25): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(246,32): warning C4251: “c10::ivalue::Tuple::elements_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\List.h(25): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(248,12): warning C4251: “c10::ivalue::Tuple::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(920): message : 参见“std::shared_ptr<c10::TupleType>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(315,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(315): message : 参见“c10::ivalue::Future::FutureError”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(325,26): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(738,28): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(739,31): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\atomic(1965): message : 参见“std::atomic<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(740,39): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(576): message : 参见“std::condition_variable”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(743,16): warning C4251: “c10::ivalue::Future::type_”: class“std::shared_ptr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(29): message : 参见“std::shared_ptr<c10::Type>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(744,55): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(744): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(745,27): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\exception(214): message : 参见“std::exception_ptr”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(749,42): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(754,39): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(760,34): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(760): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(764,67): warning C4251: “c10::ivalue::Future::dataPtrs_”: class“std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(361): message : 参见“std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(772,42): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(310): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(362): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::reference_wrapper<const c10::DataPtr>,std::allocator<std::reference_wrapper<const c10::DataPtr>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(869,29): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\List.h(25): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(965,1): warning C4244: “return”: 从“double”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(968,1): warning C4244: “return”: 从“int64_t”转换到“unsigned char”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(969,1): warning C4244: “return”: 从“int64_t”转换到“signed char”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(970,1): warning C4244: “return”: 从“int64_t”转换到“unsigned short”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(971,1): warning C4244: “return”: 从“int64_t”转换到“short”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(972,1): warning C4244: “return”: 从“int64_t”转换到“int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(973,1): warning C4244: “return”: 从“int64_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(973,1): warning C4244: “return”: 从“int64_t”转换到“unsigned int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(975,1): warning C4244: “return”: 从“int64_t”转换到“c10::detail::_guarded_unsigned_long”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue_inl.h(975,1): warning C4244: “return”: 从“int64_t”转换到“unsigned long”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(73,46): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(73): message : 参见“std::shared_ptr<std::string>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::OperatorName
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::OperatorName>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(306): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(329,32): warning C4251: “at::RecordFunction::state_”: class“std::unique_ptr<at::RecordFunction::State,std::default_delete<at::RecordFunction::State>>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(329): message : 参见“std::unique_ptr<at::RecordFunction::State,std::default_delete<at::RecordFunction::State>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(596,48): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<std::pair<at::RecordFunctionCallback,at::CallbackHandle>,std::allocator<std::pair<at::RecordFunctionCallback,at::CallbackHandle>>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\record_function.h(506): message : 参见“std::vector<std::pair<at::RecordFunctionCallback,at::CallbackHandle>,std::allocator<std::pair<at::RecordFunctionCallback,at::CallbackHandle>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorGeometry.h(56,30): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorGeometry.h(57,32): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Functions.h(2513,21): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\ArrayRef.h(280): message : 参见“c10::ArrayRef<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Functions.h(2514,33): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1100): message : 参见“c10::optional<c10::IntArrayRef>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Functions.h(2515,38): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Functions.h(2516,74): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\Functions.h(2517,27): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorNames.h(40,28): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\Dimname.h(36): message : 参见“c10::ArrayRef<at::Dimname>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorNames.h(70,23): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(97,28): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(83): message : 参见“c10::SmallVector<int64_t,6>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(102,33): warning C4251: “at::OperandInfo::tensor”: class“c10::MaybeOwned<at::Tensor>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(145): message : 参见“c10::MaybeOwned<at::Tensor>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(106,43): warning C4251: “at::OperandInfo::original_tensor”: class“c10::MaybeOwned<at::Tensor>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(145): message : 参见“c10::MaybeOwned<at::Tensor>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(398,19): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(1351): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(408,18): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(1351): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(417,26): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorImpl.h(1351): message : 参见“c10::SmallVector<int64_t,5>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(420,20): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\NamedTensorUtils.h(11): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(431,40): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(431): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(179,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(182,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(612,51): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::Tensor>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(612): message : 参见“c10::SmallVector<c10::MaybeOwned<at::Tensor>,4>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=at::DimVector
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::DimVector>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(616): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(616,42): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorUtils.h(164): message : 参见“c10::optional<at::DimVector>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(617,73): warning C4251: “at::TensorIteratorConfig::static_dtype_and_device_”: class“c10::optional<std::pair<c10::ScalarType,c10::Device>>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(617): message : 参见“c10::optional<std::pair<c10::ScalarType,c10::Device>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(652,53): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\TensorIterator.h(652): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(106,60): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(107,22): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory(2356): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(184,54): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(184): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(185,30): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(191,20): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(194,33): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1508): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(195,40): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(206,40): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(208,55): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(209,46): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(230,28): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(297,52): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<at::Tensor (const at::Tensor &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1554): message : 参见“std::function<at::Tensor (const at::Tensor &)>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::autograd::ViewInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(529): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(529,41): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(529): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(530,40): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(529): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::IValue
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::IValue>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(115): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::AliasInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::AliasInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(118): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(131,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(61): message : 参见“torch::jit::AttributeValue”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(131): message : 参见“torch::jit::GraphAttr”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(145,32): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(148,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(61): message : 参见“torch::jit::AttributeValue”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(148): message : 参见“torch::jit::GraphsAttr”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(162,19): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\attributes.h(149): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\source_range.h(177,34): warning C4251: “torch::jit::SourceRange::source_”: class“std::shared_ptr<torch::jit::Source>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\source_range.h(111): message : 参见“std::shared_ptr<torch::jit::Source>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::tuple<std::string,size_t,size_t>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\source_range.h(146): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::SourceRange>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\source_range.h(169): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(26,19): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(21): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::InlinedCallStackPtr>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(121): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(121,45): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(121): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::ModuleInstanceInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(125): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(125,58): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(117): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\stdexcept(107): message : 参见“std::runtime_error”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::ScopePtr>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\boxing\KernelFunction.h(251,43): warning C4251: “c10::KernelFunction::functor_”: class“std::shared_ptr<c10::OperatorKernel>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\boxing\KernelFunction.h(251): message : 参见“std::shared_ptr<c10::OperatorKernel>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(183,51): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Bitset.h(23): message : 参见“c10::utils::bitset”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(186,37): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\CppSignature.h(57,31): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\typeindex(25): message : 参见“std::type_index”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(181,21): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\operator_name.h(14): message : 参见“c10::OperatorName”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::AnnotatedSchema>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(182): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(182,41): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(182): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(218,71): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(218): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(220,33): warning C4251: “c10::impl::OperatorEntry::missingKernel_”: struct“c10::impl::AnnotatedKernel”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(31): message : 参见“c10::impl::AnnotatedKernel”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(221,61): warning C4251: “c10::impl::OperatorEntry::ambiguousAutogradOtherKernel_”: struct“c10::impl::AnnotatedKernel”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(31): message : 参见“c10::impl::AnnotatedKernel”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(234): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(234,54): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(234): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(278,36): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(278): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(279,83): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(279): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(281,58): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=std::string,
              V=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(281): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::string
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(285,63): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(286,20): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\Dispatcher.h(370,65): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\list(796): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(434,75): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(436,50): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(437,51): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(207): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(588,50): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(239,48): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(119): message : 参见“c10::optional<c10::DispatchKey>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(241,56): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(121): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(242,47): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(32): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(243,21): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(667,33): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(872): message : 参见“c10::optional<std::string>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(668,48): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(119): message : 参见“c10::optional<c10::DispatchKey>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\library.h(672,55): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\operator.h(182,48): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\operator.h(182): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(297,30): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(143): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(298,31): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(143): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(300,30): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(300): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(303,43): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(304,18): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(21): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(305,48): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\scope.h(121): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(313,36): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(313): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(878,29): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(878): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\ir\ir.h(1448,54): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\builtin_function.h(17): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(203,34): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(203): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(239,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(239,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(244,1): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(264,1): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(437,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\ATen\ThreadLocalState.h(33,57): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\interpreter.h(75,47): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\interpreter.h(75): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<at::ThreadLocalState>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\interpreter.h(141): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(92,47): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(92): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(117,27): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\qualified_name.h(11): message : 参见“c10::QualifiedName”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(119,32): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::shared_ptr<torch::jit::Graph>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(124): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(124,65): warning C4251: “torch::jit::GraphFunction::optimized_graph_”: class“c10::optional<std::shared_ptr<torch::jit::Graph>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(124): message : 参见“c10::optional<std::shared_ptr<torch::jit::Graph>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(131,45): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(96): message : 参见“std::recursive_mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(138,56): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(15): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\function_impl.h(143,50): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\dispatch\OperatorEntry.h(32): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\method.h(66,19): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(640): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::jit::Method
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::jit::Method>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\object.h(41): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\object.h(170,29): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(640): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(43,57): warning C4251: “std::enable_shared_from_this<torch::jit::tracer::TracingState>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::tracer::TracingState>”的客户端使用
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory(2356): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(48,31): warning C4251: “torch::jit::tracer::TracingState::graph”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function.h(26): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(57,45): warning C4251: “torch::jit::tracer::TracingState::lookup_var_name_fn”: class“std::function<std::string (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(56): message : 参见“std::function<std::string (const torch::autograd::Variable &)>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(90,31): warning C4251: “torch::jit::tracer::TracingState::env_stack”: class“std::vector<torch::jit::tracer::TracingState::Frame,std::allocator<torch::jit::tracer::TracingState::Frame>>”需要有 dll 接口由 struct“torch::jit::tracer::TracingState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(90): message : 参见“std::vector<torch::jit::tracer::TracingState::Frame,std::allocator<torch::jit::tracer::TracingState::Frame>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\frontend\tracer.h(191,38): warning C4251: “torch::jit::tracer::NoWarn::state”: class“std::shared_ptr<_Ty>”需要有 dll 接口由 struct“torch::jit::tracer::NoWarn”的客户端使用
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory(2348): message : 参见“std::shared_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::tracer::TracingState
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(101,35): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\ArrayRef.h(226): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(134,35): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\ArrayRef.h(226): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(317,52): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(317): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319,55): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(320,60): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(327,42): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\compilation_unit.h(327): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::string,std::allocator<std::string>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\jit\api\module.h(295): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\serialize\input-archive.h(110,32): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(76,44): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\ivalue.h(1141): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\variant.h(1775,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\memory(2356): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(544,47): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(592,44): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(595,62): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(248): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\module.h(598,38): warning C4251: “torch::nn::Module::name_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(872): message : 参见“c10::optional<std::string>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,46): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(81,46): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(29,50): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(31,46): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(52,50): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(54,46): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(78,50): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(80,46): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(109,46): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(117,37): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(132,50): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(143,46): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(151,37): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(163,50): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(182,46): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(953): message : 参见“c10::optional<double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(190,37): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(206,50): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(27,44): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(30,44): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(34,42): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(38,41): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(41,40): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(72,44): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(76,42): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(80,41): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(83,40): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(223,49): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(263,49): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(303,49): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(65,34): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(67,41): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(69,38): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(56): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(653,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(675,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(685,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(23,37): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(55,37): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(49): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(90,37): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(122,37): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(154,37): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(195,37): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(228,37): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(262,37): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(296,37): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(333,37): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(372,37): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404,68): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 参见“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(417,37): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(448,37): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(486,37): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(522,37): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(562,37): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(593,37): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(629,37): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(664,37): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(695,37): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(20,52): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(43,52): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(133,41): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“c10::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(734): message : 参见“c10::optional<at::Tensor>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(22,1): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(23): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(54,1): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(55): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(95,40): warning C4251: “torch::nn::ZeroPad2dOptions::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPad2dOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(90): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(111,1): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(115): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(162,39): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(165,27): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(153): message : 参见“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\padding.h(14,36): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(963,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(964,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(23,56): warning C4251: “torch::nn::UpsampleOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(398): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<double,std::allocator<double>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<double,std::allocator<double>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26,63): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“c10::optional<std::vector<double,std::allocator<double>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<double,std::allocator<double>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(36,27): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(30): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(42,49): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(64,56): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\jit_type.h(398): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(67,63): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“c10::optional<std::vector<double,std::allocator<double>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<double,std::allocator<double>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(71,27): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(55): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(82,49): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(93,58): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(24,27): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(20): message : 参见“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(26,43): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(21): message : 参见“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(28,49): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\functional.h(96,21): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\data\transforms\tensor.h(39): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\adaptive.h(26,43): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(72,31): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(82,15): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(84,18): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(176,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(176,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(209,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(209,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(245,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(245,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(332,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(332,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(368,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(368,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(404,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(27): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(404,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(22,1): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(22,1): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(90): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(72): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(54,1): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(120): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(54,1): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(90): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(146): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(54,1): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(91): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(172): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(111,1): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(241): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(258): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(111,1): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(90): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(241): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(284): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(111,1): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(91): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(241): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(310): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,1): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(42): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,1): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(50): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(73): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,1): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(58): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(100): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,1): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(132): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,1): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(140): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(178): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,1): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(148): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(209): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,1): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(236): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(248): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,1): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(201): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(265): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,1): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(209): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(298): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,1): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(217): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(331): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,1): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(359): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(371): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,1): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(270): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(388): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,1): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(278): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(417): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,1): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(286): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(446): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,1): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(354): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(494): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,1): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(362): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(524): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,1): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(370): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(554): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(602,37): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(452): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(646,37): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(460): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,1): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(510): message : 参见“torch::nn::LPPoolOptions<1>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(691): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,1): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(518): message : 参见“torch::nn::LPPoolOptions<2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(720): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(23,43): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(15): message : 参见“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(68,43): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(183,43): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,1): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(88): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,1): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(87,1): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(105): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(87,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(150): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(87,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::tuple<at::Tensor,at::Tensor>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(157): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<at::Tensor,at::Tensor>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(203): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(87,1): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(869,19): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\anomaly_mode.h(61,32): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1508): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(337,44): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\WrapDimUtils.h(25): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(341,28): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(27): message : 参见“std::shared_ptr<CUevent_st>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(348,34): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Exception.h(35): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(352,59): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(314): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(155,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(205,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(476,39): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(476): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(514): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(514,68): warning C4251: “torch::autograd::profiler::TLSProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSProfilerGuard”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(493): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(515,70): warning C4251: “torch::autograd::profiler::TLSProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSProfilerGuard”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(451): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(519,23): warning C4251: “torch::autograd::profiler::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::FileLineFunc”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(521,23): warning C4251: “torch::autograd::profiler::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::FileLineFunc”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\xstring(4564): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(578,26): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(581,23): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::event_lists_map_”: class“std::unordered_map<uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(579): message : 参见“std::unordered_map<uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,std::shared_ptr<torch::autograd::profiler::RangeEventList>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(588): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(588,77): warning C4251: “torch::autograd::profiler::ProfilerThreadLocalState::remoteProfiledEvents_”: class“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerThreadLocalState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\profiler_legacy.h(588): message : 参见“c10::optional<std::vector<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>,std::allocator<std::vector<torch::autograd::profiler::LegacyEvent,std::allocator<torch::autograd::profiler::LegacyEvent>>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\saved_variable.h(54,40): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\saved_variable.h(60,33): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(1508): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\saved_variable.h(63,36): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\saved_variable.h(64,40): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(99,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(519,20): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\mutex(87): message : 参见“std::mutex”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(522,24): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(33): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(526,54): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(526): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(528,59): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(416): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(530,61): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(392): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(532,52): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(532): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(185,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(191,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(198,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(204,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(278,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(100,57): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(100): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(124,58): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(13): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(125,52): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(13): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(126,63): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\function.h(34): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(127,25): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(133,31): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\autograd\custom_function.h(150,28): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(36,39): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(19): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(67,39): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(19): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(60,34): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(881): message : 参见“torch::nn::MultiheadAttention”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(63,20): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(66,21): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(69,20): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(72,21): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(74,21): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(77,22): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(79,22): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(138,31): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(881): message : 参见“torch::nn::MultiheadAttention”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(141,19): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,18): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,36): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(881): message : 参见“torch::nn::MultiheadAttention”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,19): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,18): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,17): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,18): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,17): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,19): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,18): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(28,55): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88): message : 参见“torch::nn::TransformerEncoderLayer”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(34,31): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(57,53): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(187): message : 参见“torch::nn::TransformerDecoderLayer”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(63,29): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(59,23): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(62,19): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(122,22): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(125,19): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(50,39): warning C4251: “torch::nn::TransformerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(19): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(53,39): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(56,39): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(126,22): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(129,22): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(85,30): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(823): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(87,45): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(155,50): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(97): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(157,80): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(142): message : 参见“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(159,47): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(24,29): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\adamw.h(24,29): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(20,47): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(24,57): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(872): message : 参见“c10::optional<std::string>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44,42): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(45,42): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46,36): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(183,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(367): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\include\type_traits(642): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 类 模板 实例化“std::is_copy_constructible<c10::trivially_copyable_optimization_optional_base<T>>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(427): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(47): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(395,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(47,53): warning C4251: “torch::optim::LBFGSParamState::al_”: class“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(47): message : 参见“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
D:\libtorch1.9_cpu\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(79,38): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“c10::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
D:\libtorch1.9_cpu\libtorch\include\ATen\core\TensorBody.h(774): message : 参见“c10::optional<int64_t>”的声明
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(539,62): warning C4244: “参数”: 从“_Ty”转换到“T”，可能丢失数据
          with
          [
              _Ty=unsigned __int64
          ]
          and
          [
              T=int32_t
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(268): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\ATen\core\function_schema.h(268): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,double>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\complex.h(166,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(40): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(38): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(173): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\TypeCast.h(186): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\Scalar.h(63): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\complex.h(166,1): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(180,39): warning C4244: “参数”: 从“int16_t”转换到“c10::DeviceIndex”，可能丢失数据
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(382): message : 查看对正在编译的函数 模板 实例化“c10::constexpr_storage_t<T>::constexpr_storage_t<c10::DeviceType,int16_t&>(c10::DeviceType &&,int16_t &)”的引用
          with
          [
              T=c10::Device
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(382): message : 查看对正在编译的函数 模板 实例化“c10::constexpr_storage_t<T>::constexpr_storage_t<c10::DeviceType,int16_t&>(c10::DeviceType &&,int16_t &)”的引用
          with
          [
              T=c10::Device
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(553): message : 查看对正在编译的函数 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>::trivially_copyable_optimization_optional_base<c10::DeviceType,int16_t&>(c10::in_place_t,c10::DeviceType &&,int16_t &)”的引用
          with
          [
              T=c10::Device
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\util\Optional.h(553): message : 查看对正在编译的函数 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>::trivially_copyable_optimization_optional_base<c10::DeviceType,int16_t&>(c10::in_place_t,c10::DeviceType &&,int16_t &)”的引用
          with
          [
              T=c10::Device
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(205): message : 查看对正在编译的函数 模板 实例化“c10::optional<c10::Device>::optional<_Ty,int16_t&>(c10::in_place_t,_Ty &&,int16_t &)”的引用
          with
          [
              _Ty=c10::DeviceType
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(204): message : 查看对正在编译的函数 模板 实例化“c10::optional<c10::Device>::optional<_Ty,int16_t&>(c10::in_place_t,_Ty &&,int16_t &)”的引用
          with
          [
              _Ty=c10::DeviceType
          ]
D:\libtorch1.9_cpu\libtorch\include\c10\core\TensorOptions.h(215): message : 查看对正在编译的函数 模板 实例化“c10::TensorOptions c10::TensorOptions::device<c10::DeviceType,int16_t&>(c10::DeviceType &&,int16_t &) noexcept const”的引用
    正在创建库 D:\VSProject\IBERTtest\x64\Release\IBERTtest.lib 和对象 D:\VSProject\IBERTtest\x64\Release\IBERTtest.exp
  正在生成代码
  4 of 1093 functions ( 0.4%) were compiled, the rest were copied from previous compilation.
    1 functions were new in current compilation
    5 functions had inline decision re-evaluated but remain unchanged
  已完成代码的生成
  IBERTtest.vcxproj -> D:\VSProject\IBERTtest\x64\Release\IBERTtest.exe
